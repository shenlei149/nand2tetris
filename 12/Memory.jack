// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

    static Array memory;
    static int heapBase, heapSize;
    static int freeList;

    function void initNewNode(int address, int size) {
        do Memory.poke(address, size);
        do Memory.poke(address + 1, 0); // next

        return;
    }

    /** Initializes the class. */
    function void init() {
        let memory = 0;
        let heapBase = 2048;
        let heapSize = 8000 - heapBase;
        let freeList = heapBase;
        do Memory.initNewNode(freeList, heapSize);

        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return memory[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let memory[address] = value;

        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int freeBlock, ret;
        var int preSize;

        let freeBlock = freeList;
        while (Memory.peek(freeBlock) < (size + 2)) {
            let freeBlock = Memory.peek(freeBlock + 1);
        } // TODO not found?

        // update size
        let preSize = Memory.peek(freeBlock);
        do Memory.poke(freeBlock, preSize - size - 2);

        // tail of freeBlock
        let ret = freeBlock + Memory.peek(freeBlock);

        do Output.printInt(ret);

        return ret;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        // TODO update freeList
        return;
    }
}
